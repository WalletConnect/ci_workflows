name: App - Check

on:
  workflow_call:
    inputs:
      test-args:
        description: 'The arguments to pass to the test command'
        type: string
        default: '--all-features --lib --bins'
      test-suites:
        description: 'Extra test suites to run'
        type: string
        default: ''
      rust-toolchain:
        description: 'The Rust version to use'
        type: string
        default: 'stable'
      rust-toolchain-formatting:
        description: 'The Rust version to use to check formatting'
        type: string
        default: 'stable'
      rust-toolchain-udeps:
        description: 'The Rust version to use to run udeps'
        type: string
        default: 'nightly'
      check-udeps:
        description: Enable checking for unusued dependencies
        type: boolean
        default: true
      rust-backtrace:
        description: 'The Rust backtrace settings'
        type: string
        default: 'full'
      install-protoc:
        description: 'Install protoc before running tests'
        type: boolean
        default: true
      use-sccache:
        description: 'Run sccache-cache before running tests'
        type: boolean
        default: true
      use-postgresql:
        description: 'Run postgresql before running tests'
        type: boolean
        default: false
      test-env-vars:
        description: 'The environment variables to set for the tests'
        type: string
        default: ''
      run-label:
        description: 'The run label to use for the actions'
        type: string
        default: 'ubuntu-latest'

env:
  RUST_BACKTRACE: ${{ inputs.rust-backtrace }}

permissions:
  contents: read

jobs:
  clippy:
    name: Clippy
    runs-on: ${{ inputs.run-label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust ${{ inputs.rust-toolchain }}
        uses: WalletConnect/actions-rs/toolchain@2.0.0
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          profile: 'minimal'
          components: 'cargo,clippy'
          override: true

      - name: Install Protoc
        if: ${{ inputs.install-protoc == true }}
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run sccache-cache
        if: ${{ inputs.use-sccache == true }}
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Clippy
        uses: WalletConnect/actions-rs/cargo@2.0.0
        with:
          command: clippy
          args: --workspace --all-features --all-targets -- -D warnings

  formatting:
    name: Formatting
    runs-on: ${{ inputs.run-label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust ${{ inputs.rust-toolchain-formatting }}
        uses: WalletConnect/actions-rs/toolchain@2.0.0
        with:
          toolchain: ${{ inputs.rust-toolchain-formatting }}
          profile: 'default'
          override: true

      - name: Run sccache-cache
        if: ${{ inputs.use-sccache == true }}
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Check Formatting
        uses: WalletConnect/actions-rs/cargo@2.0.0
        with:
          command: fmt
          args: -- --check

  tests:
    name: Unit Tests
    runs-on: ${{ inputs.run-label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust ${{ inputs.rust-toolchain }}
        uses: WalletConnect/actions-rs/toolchain@2.0.0
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          profile: 'default'
          override: true

      - name: Install Protoc
        if: ${{ inputs.install-protoc == true }}
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run sccache-cache
        if: ${{ inputs.use-sccache == true }}
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Unit Tests
        uses: WalletConnect/actions-rs/cargo@2.0.0
        with:
          command: test
          args: ${{ inputs.test-args }}

  tests-suites:
    name: Tests Suite "${{ matrix.element }}"
    if: (inputs.test-suites != '') && (inputs.test-suites != '[]')
    strategy:
      fail-fast: false
      matrix:
        element: ${{ fromJson(inputs.test-suites) }}
    runs-on: ${{ inputs.run-label }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse and export environment variables
        run: |
          echo '${{ inputs.test-env-vars }}' | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" >> $GITHUB_ENV

      - name: Run Postgresql
        if: ${{ inputs.use-postgresql == true }}
        uses: ikalnytskyi/action-setup-postgres@v5

      - name: Install Rust ${{ inputs.rust-toolchain }}
        uses: WalletConnect/actions-rs/toolchain@2.0.0
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          profile: 'default'
          override: true

      - name: Install Protoc
        if: ${{ inputs.install-protoc == true }}
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run sccache-cache
        if: ${{ inputs.use-sccache == true }}
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Test Suite
        uses: WalletConnect/actions-rs/cargo@2.0.0
        with:
          command: test
          args: --test ${{ matrix.element }}

  unused-dependencies:
    name: Unused Dependencies
    runs-on: ${{ inputs.run-label }}
    if: ${{ inputs.check-udeps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust ${{ inputs.rust-toolchain-udeps }}
        uses: WalletConnect/actions-rs/toolchain@2.0.0
        with:
          toolchain: ${{ inputs.rust-toolchain-udeps }}
          profile: 'default'
          override: true

      - name: Run sccache-cache
        if: ${{ inputs.use-sccache == true }}
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Check Dependencies
        uses: WalletConnect/actions-rs/udeps@2.0.0
        with:
          version: 'v0.1.43'
          args: '--all-targets'

  license:
    name: Licenses
    runs-on: ${{ inputs.run-label }}
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check license
